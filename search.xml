<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>my-first-blog</title>
    <url>/2021/02/13/my-first-blog/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>putty连接</title>
    <url>/2021/02/14/PUTTY%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="PUTTY连接"><a href="#PUTTY连接" class="headerlink" title="PUTTY连接"></a>PUTTY连接</h1><blockquote>
<h2 id="ssh安装-启动"><a href="#ssh安装-启动" class="headerlink" title="ssh安装 启动"></a>ssh安装 启动</h2></blockquote>
<blockquote>
<p>(一般ssh都不是自带的，需要自己安装)</p>
<ul>
<li>sudo apt-get update</li>
<li>sudo apt-get install openssh-server</li>
</ul>
<blockquote>
<p>若显示无法等待缓存锁：无法获得锁</p>
<p>sudo rm /var/lib/dpkg/lock-frontend</p>
<p>sudo rm /var/cahe/apt/archives/lock</p>
<p>sudo rm /var/lib/dpkg/lock</p>
</blockquote>
<ul>
<li><p>查看ssh是否启动</p>
<p>​    sudo ps -e | grep ssh </p>
<ul>
<li><p>有**<em>sshd**</em>就是启动了</p>
</li>
<li><p>若没有启动</p>
<p>sudo service ssh start</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<h2 id="putty连接"><a href="#putty连接" class="headerlink" title="putty连接"></a>putty连接</h2></blockquote>
<blockquote>
<ul>
<li><p>linux开ssh</p>
</li>
<li><p>查看ip</p>
<p>​    sudo ifconfig -a</p>
</li>
<li><p>在putty输入ip</p>
</li>
<li><p>用户名bijiasuo</p>
<p>密码aaxxxxxx（**<em>不显示**</em>）</p>
</li>
</ul>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>ubuntu上安装搜狗输入法</title>
    <url>/2021/02/14/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_37589838/article/details/81208409?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161327484216780266216298%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&request_id=161327484216780266216298&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-81208409.pc_search_result_hbase_insert&utm_term=%25E5%25A6%2582%25E4%25BD%2595%25E5%259C%25A8ubuntu%25E4%25B8%258A%25E5%25AE%2589%25E8%25A3%2585+%25E6%2590%259C%25E7%258B%2597%25E8%25BE%2593%25E5%2585%25A5%25E6%25B3%2595%2528%25E5%25B7%25B2%25E7%25BB%258F%25E6%2588%2590%25E5%258A%259F%2529">ubuntu上安装搜狗输入法</a></p>
]]></content>
  </entry>
  <entry>
    <title>ubuntu常用快捷键</title>
    <url>/2021/02/13/ubuntu%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="ubuntu常用快捷键"><a href="#ubuntu常用快捷键" class="headerlink" title="ubuntu常用快捷键"></a>ubuntu常用快捷键</h1><ul>
<li><p>复制粘贴命令</p>
<ol>
<li>ctrl + shift + c , ctrl + shift + v</li>
<li>直接鼠标左键选中要复制的命令，然后在需要粘粘的地方按一下这鼠标滚轮即可。</li>
</ol>
</li>
<li><p>语言切换</p>
<p>​    ctrl + 空格 或 shift</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>基于ubuntu搭建的hexo</title>
    <url>/2021/02/14/%E5%9F%BA%E4%BA%8Eubuntu%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/Gage__/article/details/80302471?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161327320616780271542743%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fall.%252522%25257D&request_id=161327320616780271542743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-80302471.pc_search_result_hbase_insert&utm_term=%25E5%259F%25BA%25E4%25BA%258Eubuntu%25E6%2590%25AD%25E5%25BB%25BAhexo%25E4%25B8%25AA%25E4%25BA%25BA%25E5%258D%259A%25E5%25AE%25A2">基于ubuntu搭建hexo</a></p>
<p><a href="https://www.jianshu.com/p/a3ab83dba041">基于ubuntu搭建hexo(1)</a></p>
<p><a href="https://www.jianshu.com/p/f7a84b4c5bca">在source/_posts/下生成要写的博客（标题）</a></p>
<p><a href="https://www.jianshu.com/p/4ba39737969a?utm-campaign">关于阿里云ip设置</a></p>
<ul>
<li><p>github xxxx.GitHub.io自动跳转之前绑定的域名</p>
<p>请一下浏览器的缓存（前提：确定设置好的）</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>搭建LAMP服务器</title>
    <url>/2021/02/14/%E6%90%AD%E5%BB%BALAMP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="搭建LAMP服务器"><a href="#搭建LAMP服务器" class="headerlink" title="搭建LAMP服务器"></a>搭建LAMP服务器</h1><ul>
<li><p>安装Apache2</p>
<ol>
<li>sudo apt-get install apache2 -y</li>
<li>登录http://&lt;ip地址&gt; 可以看到  <strong><em>“it works“</em></strong>  ，安装成功。</li>
</ol>
</li>
<li><p>安装php组件</p>
<ol>
<li><p>apt-get 里有 php7.0 ，所以直接安装php7.0；</p>
<p>​    sudo apt-get install php7.0 -y</p>
</li>
<li><p>安装php相关组件；</p>
<p>​    sudo apt-get install libapache2-mod-php7.0</p>
</li>
</ol>
</li>
<li><p>安装MySQL服务</p>
<ol>
<li><p>安装MySQL；</p>
<p>​    sudo apt-get install mysql-server -y</p>
</li>
<li><p>安装php MySQL相关组件；</p>
<p>​    sudo apt-get install php7.0-mysql</p>
</li>
</ol>
</li>
<li><p>安装 phpmyadmin</p>
<pre><code>1. 使用 apt-get 安装apamyadmin,安装过程中，需要根据提示选择 apache2，
</code></pre>
<p>再输入root密码和数据库密码；</p>
<p>​            sudo apt-get install phpmyadmin -y</p>
<ol start="2">
<li><p>建立/var/www/html 下的软连接；</p>
<p>​    sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</p>
</li>
<li><p>重启MySQL服务；</p>
<p>​    sudo service mysql restart</p>
</li>
<li><p>重启Apcahe服务；</p>
<p>​    sudo systemctl restart apache2.service</p>
</li>
</ol>
</li>
<li><p>安装并配置 Wordpress</p>
<ol>
<li><p>下载wordpress安装包；</p>
<p>​    wget <a href="http://cn.wordpress.org/wordpress-4.7.4-zh_CN.zip">http://cn.wordpress.org/wordpress-4.7.4-zh_CN.zip</a></p>
<ol start="2">
<li>下载完成后，解压这个安装包</li>
</ol>
<p>​    sudo unzip wordpress-4.7.4-zh_CN.zip</p>
</li>
<li><p>加压完成后，就能再wordpress文件夹里看到wordpress的源码</p>
</li>
<li><p>php默认访问/var/www/html/文件夹，所以我们需要把wordpress文件夹里的文件都复制到/var/www/html/文件夹</p>
<p>​    sudo mv wordpress/* /var/www/html/</p>
</li>
<li><p>修改 /var/www/html/目录权限；</p>
<p>​    sudo chmod -R 777 /var/www/html/</p>
</li>
<li><p>将 apache 指定到index.html</p>
<p>​    sudo mv /var/www/html/index.html /var/www/html/index~.html</p>
</li>
<li><p>重启 Apache 服务</p>
<p>​    sudo systemctl restart apache2.service </p>
</li>
<li><p>输入http://<ip>就能看到worpress界面；</p>
</li>
</ol>
</li>
<li><p><strong><em>ps</em></strong>：</p>
<ol>
<li>apt-get update 是同步 /etc/apt/source.list 和 /etc/apt/source.list.d 中列出的源的索引，这样才能获取到最新软件包；</li>
<li>apt-get update只是更新了apt的资源列表，没有真正的对系统执行更新。如果需要，要使用apt-get upgrade更新。</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>vi编辑器基础</title>
    <url>/2021/02/16/vi%E7%BC%96%E8%BE%91%E5%99%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="vi–终端中的编辑器"><a href="#vi–终端中的编辑器" class="headerlink" title="vi–终端中的编辑器"></a>vi–终端中的编辑器</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li><code>vi</code><strong>简介</strong></li>
<li><strong>打开和新建文件</strong></li>
<li><strong>三种工作模式</strong></li>
<li><strong>常用命令</strong></li>
<li><strong>分屏命令</strong></li>
<li><strong>常用命令速查图</strong></li>
</ul>
<h2 id="01-vi简介"><a href="#01-vi简介" class="headerlink" title="01. vi简介"></a>01. vi简介</h2><p><strong>1.1 目的</strong></p>
<p>可以使用<code>ssh</code>远程登录到服务器上，并且使用<code>vi</code>进行快速的编辑</p>
<ul>
<li>常见的需要修改的文件包括<ul>
<li>源程序</li>
<li>配置文件</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>在没有图形界面的环境下编辑文件，<code>vi</code>是最佳选择！</li>
</ul>
</blockquote>
<p><strong>1.2 vi和vim</strong></p>
<ul>
<li>在很多<code>linux</code>中，直接把<code>vi</code>做成<code>vim</code>的软连接<a href="%60vi%60%E6%98%AF%60vim%60%E7%9A%84%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F">^1</a></li>
</ul>
<p><strong>vi</strong></p>
<ul>
<li>核心设计思想——让程序员的手指始终保持在键盘的核心区域，就能完成所有的编辑操作。</li>
<li><code>vi</code>的特点<ul>
<li><strong>没有图形界面</strong>的<strong>功能强大</strong>的编辑器</li>
<li>只是编辑<strong>文本内容</strong>，不能在字体，段落排版</li>
<li><strong>不支持鼠标操作</strong></li>
<li><strong>没有菜单</strong></li>
<li><strong>只有命令</strong></li>
</ul>
</li>
<li><code>vi</code>编辑器在<strong>系统管理</strong>，<strong>服务器管理</strong>编辑文件时，<strong>其功能不是图形界面的编辑器能比拟的</strong></li>
</ul>
<p><strong>vim</strong></p>
<ul>
<li><code>vim</code>是从<code>vi</code>发展出来的一个文本编辑器，支持<strong>代码补全</strong>，<strong>编译</strong>及<strong>错误跳转</strong>等方便编程的功能特别丰富，在程序员中被广泛使用，被称为<strong>编辑器之神</strong></li>
</ul>
<h2 id="02-打开和新建文件"><a href="#02-打开和新建文件" class="headerlink" title="02. 打开和新建文件"></a>02. 打开和新建文件</h2><ul>
<li>在终端输入<code>vi</code> 在后面跟上文件夹名即可<ul>
<li>文件存在直接打开</li>
<li>文件不存在，会新建一个文件</li>
</ul>
</li>
</ul>
<p><strong>2.1 打开文件并且定位行</strong></p>
<ul>
<li><p>在日常工作中，有可能会遇到 <strong>打开一个文件，并定位到指定行</strong>的情况</p>
</li>
<li><p>例如：在开发时，<strong>知道某一行代码有错误</strong>，可以<strong>快速定位</strong>到出错代码的位置</p>
</li>
<li><p>这个时候，知道使用以下命令打开文件</p>
<p>​    <code>vi 文件名 +行数</code>     若只带+，会直接定位到文件末尾</p>
</li>
</ul>
<p><strong>2.2异常处理</strong></p>
<ul>
<li>如果<code>vi</code>异常退出，在磁盘上可能上会保存有 <strong>交换文件</strong></li>
<li>下次再使用<code>vi</code>编辑该文件时，会看到屏幕信息，按下字母<code>d</code>可以<strong>删除交换文件</strong>即可</li>
</ul>
<p><strong>ps</strong>：按键盘时，注意关闭输入法       <code>.swp</code>是交换文件</p>
<h2 id="03-三种工作模式"><a href="#03-三种工作模式" class="headerlink" title="03.三种工作模式"></a>03.三种工作模式</h2><ul>
<li><p><code>vi</code> 有三种基本工作模式</p>
<p><strong>1. 命令模式</strong></p>
<ul>
<li><strong>打开文件首先进入命令模式</strong>，是使用<code>vi</code>的入口</li>
<li>通过<strong>命令</strong>对文件进行常规的编辑操作，例如：<strong>定位，翻页，复制，粘贴，删除……</strong></li>
<li>在其他图形编辑器下，通过<strong>快捷键</strong>或者<strong>鼠标</strong>实现的操作，都在<strong>命令模式</strong>下实现</li>
</ul>
<p><strong>2.末行模式</strong>——执行<strong>保存，退出</strong>等操作</p>
<ul>
<li>要退出<code>vi</code>返回到控制台，需要在末行模式下输入命令</li>
<li><strong>末行模式</strong>是<code>vi</code>的<strong>出口</strong></li>
</ul>
<p><strong>3. 编辑模式</strong>——正常的编辑文字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[打开文件]--&gt;b(命令模式)</span><br><span class="line">b--&gt;|:|c(末行模式)</span><br><span class="line">b--&gt;|i - insert|d(编辑模式)</span><br><span class="line">c--&gt;|ESC|b</span><br><span class="line">d--&gt;|ESC|b</span><br><span class="line">c--&gt;|wq-write &amp; quit|e[关闭文件]</span><br></pre></td></tr></table></figure>
<p><strong>末行模式命令</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">英文</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">w</td>
<td align="center">write</td>
<td align="center">保存</td>
</tr>
<tr>
<td align="center">q</td>
<td align="center">quit</td>
<td align="center">退出，如果没有保存，不允许退出</td>
</tr>
<tr>
<td align="center">q!</td>
<td align="center">quit</td>
<td align="center">强行退出，不保存退出</td>
</tr>
<tr>
<td align="center">wq</td>
<td align="center">write&amp;quit</td>
<td align="center">保存并退出</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center"></td>
<td align="center">保存并退出</td>
</tr>
</tbody></table>
<h2 id="04-常用命令"><a href="#04-常用命令" class="headerlink" title="04.常用命令"></a>04.常用命令</h2><p><strong>命令线路图</strong></p>
<ol>
<li>重复此时</li>
</ol>
<ul>
<li>在命令模式下，<strong>先输入一个数字，再跟上一个命令</strong>，可以让该命令<strong>重复执行指定次数</strong></li>
</ul>
<ol start="2">
<li>移动和选择(多练)</li>
</ol>
<ul>
<li><code>vi</code>之所以快，关键在于<strong>能够快速定位到要编辑的代码行</strong></li>
<li><strong>移动命令</strong>能够和<strong>编辑操作</strong>命令<strong>组合使用</strong></li>
</ul>
<ol start="3">
<li>编辑操作</li>
</ol>
<ul>
<li><strong>删除，复制，粘粘，替换，缩排</strong></li>
</ul>
<ol start="4">
<li><p>撤销和重复</p>
</li>
<li><p>查找替换</p>
</li>
<li><p>编辑</p>
</li>
</ol>
<p><strong>学习提示</strong></p>
<ol>
<li><code>vi</code>的命令比较多，<strong>不要期望一下在全能记住</strong>，个别命令忘记，只会影响编程速度而已</li>
<li>在使用<code>vi</code>命令时，注意<strong>关闭中文输入法</strong></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>vim常用命令</title>
    <url>/2021/02/16/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="vim常用命令"><a href="#vim常用命令" class="headerlink" title="vim常用命令"></a>vim常用命令</h2><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[上下左右]h</td>
<td align="center">向左</td>
</tr>
<tr>
<td align="center">j</td>
<td align="center">向下</td>
</tr>
<tr>
<td align="center">k</td>
<td align="center">向上</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center">向右</td>
</tr>
<tr>
<td align="center">[行内移动]w(word)</td>
<td align="center">向后移动一个单词</td>
</tr>
<tr>
<td align="center">b（back）</td>
<td align="center">向前移动一个单词</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">行首</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">行首，第一个不是空白字符的位置</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">行尾</td>
</tr>
<tr>
<td align="center">[行数移动]gg(go)</td>
<td align="center">文件顶部</td>
</tr>
<tr>
<td align="center">G</td>
<td align="center">文件末尾</td>
</tr>
<tr>
<td align="center">数字gg</td>
<td align="center">移动到数字对应行数</td>
</tr>
<tr>
<td align="center">数字G</td>
<td align="center">移动到数字对应行数</td>
</tr>
<tr>
<td align="center">:数字</td>
<td align="center">移动到数字对应行数</td>
</tr>
<tr>
<td align="center">**[屏幕移动]**Ctrl+b(back)</td>
<td align="center">向上翻页</td>
</tr>
<tr>
<td align="center">Ctrl+f(forward)</td>
<td align="center">向下翻页</td>
</tr>
<tr>
<td align="center">H(head)</td>
<td align="center">屏幕顶部</td>
</tr>
<tr>
<td align="center">M(middle)</td>
<td align="center">屏幕中间</td>
</tr>
<tr>
<td align="center">L(low)</td>
<td align="center">屏幕底部</td>
</tr>
<tr>
<td align="center">{[段落移动]</td>
<td align="center">上一段</td>
</tr>
<tr>
<td align="center">}</td>
<td align="center">下一段</td>
</tr>
<tr>
<td align="center">[括号切换]%</td>
<td align="center">括号匹配及切换</td>
</tr>
<tr>
<td align="center">mx(mark)[标记]</td>
<td align="center">添加标记x，x是a-z或A-Z之间的任意一个字母</td>
</tr>
<tr>
<td align="center">‘x</td>
<td align="center">直接定位到标记x所在位置</td>
</tr>
<tr>
<td align="center">v(选中文本，可和移动命令连用)</td>
<td align="center">从光标位置开始按照正常模式选择文本(可视模式)</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">选中光标经过的完整行(可视行模式)</td>
</tr>
<tr>
<td align="center">Ctrl+v</td>
<td align="center">垂直方向选中文本(可视块模式)</td>
</tr>
<tr>
<td align="center">[撤销和恢复撤销]u(undo)</td>
<td align="center">撤销上次命令</td>
</tr>
<tr>
<td align="center">Ctrl+r(redo)</td>
<td align="center">恢复撤销的命令</td>
</tr>
<tr>
<td align="center">[删除文本]x(cut)</td>
<td align="center">删除光标所在字符，或者选中文字</td>
</tr>
<tr>
<td align="center">d(delete，集合移动命令)</td>
<td align="center">删除移动命令对应的内容</td>
</tr>
<tr>
<td align="center">dd</td>
<td align="center">删除光标所在行，可以ndd复制多行</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">删除至行尾</td>
</tr>
<tr>
<td align="center">ps：以上命令常用组合(移动命令)</td>
<td align="center">dw d0 d} ndd d代码行G d’a</td>
</tr>
<tr>
<td align="center">[复制，粘粘]y(copy)</td>
<td align="center">复制</td>
</tr>
<tr>
<td align="center">yy(copy)</td>
<td align="center">复制一行，可以nyy复制多行</td>
</tr>
<tr>
<td align="center">p(paste)</td>
<td align="center">粘粘</td>
</tr>
<tr>
<td align="center">[替换]r(replace)</td>
<td align="center">替换当前字符(命令模式时)</td>
</tr>
<tr>
<td align="center">R(replace)</td>
<td align="center">替换当前行光标后的字符(替换模式,ESC返回命令模式)</td>
</tr>
<tr>
<td align="center">[缩排和重复执行]&gt;&gt;</td>
<td align="center">向右增加缩进</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">向左减少缩进</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">重复上次命令</td>
</tr>
<tr>
<td align="center">[查找]/str (n，N)</td>
<td align="center">查找str(查找下一个，上一个)</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">向后查找当前光标所在单词</td>
</tr>
<tr>
<td align="center">#</td>
<td align="center">向前查找当前光标所在单词</td>
</tr>
<tr>
<td align="center">可视区域(范围)替换</td>
<td align="center">:s/旧文本/新文本/g</td>
</tr>
<tr>
<td align="center">全局替换</td>
<td align="center">:%s/旧文本/新文本/g</td>
</tr>
<tr>
<td align="center">确认替换(n,y,a(所有),q(退出),l(最后一个),^E(向下滚屏),^Y(向上滚屏))</td>
<td align="center">:%s/旧文本/新文本/gc</td>
</tr>
<tr>
<td align="center">[插入命令，一下皆可进入编辑模式]i(insert)</td>
<td align="center">在当前字符前插入文本</td>
</tr>
<tr>
<td align="center">I(insert)</td>
<td align="center">在行首插入文本</td>
</tr>
<tr>
<td align="center">a(aapend)</td>
<td align="center">在当前字符后添加文本</td>
</tr>
<tr>
<td align="center">A(append)</td>
<td align="center">在行末添加文本</td>
</tr>
<tr>
<td align="center">o</td>
<td align="center">在当前行后面插入一空行</td>
</tr>
<tr>
<td align="center">O</td>
<td align="center">在当前行前面插入一空行</td>
</tr>
<tr>
<td align="center">[末行命令拓展]:e .(edit)</td>
<td align="center">会打开内置的文件浏览器，浏览当前目录下的文件</td>
</tr>
<tr>
<td align="center">:n 文件名(new)</td>
<td align="center">新建文件</td>
</tr>
<tr>
<td align="center">:w 文件名(write)</td>
<td align="center">另存为，但仍然编辑当前文件，并不会切换文件</td>
</tr>
<tr>
<td align="center">[分屏]:sp 文件名(split)</td>
<td align="center">横向增加分屏</td>
</tr>
<tr>
<td align="center">:vsp 文件名(vertical split)</td>
<td align="center">纵向增加分屏</td>
</tr>
<tr>
<td align="center">w(window)</td>
<td align="center">切换到下一个窗口</td>
</tr>
<tr>
<td align="center">r(reverse)</td>
<td align="center">互换窗口</td>
</tr>
<tr>
<td align="center">c(close)</td>
<td align="center">关闭当前窗口，但是不能关闭最后一个窗口</td>
</tr>
<tr>
<td align="center">q(quit)</td>
<td align="center">推迟当前窗口，如果是最后一个窗口则关闭vi</td>
</tr>
<tr>
<td align="center">o(other)</td>
<td align="center">关闭其他窗口</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>python(三)(简)</title>
    <url>/2021/03/03/python%20(%E4%B8%89)(%E4%BB%8E%E7%AE%80)/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="python-三-从简"><a href="#python-三-从简" class="headerlink" title="python (三)(从简)"></a>python (三)(从简)</h1><h2 id="07-函数"><a href="#07-函数" class="headerlink" title="07. 函数"></a>07. 函数</h2><h3 id="7-1-定义函数"><a href="#7-1-定义函数" class="headerlink" title="7.1 定义函数"></a>7.1 定义函数</h3><p>下面是一个打印问候语的简单函数，名为greet()</p>
<blockquote>
<p>def greet():<code>1</code></p>
<p>​    “”””显示简单的问候语”””<code>2</code></p>
<p>​    print(“hello”)</p>
<p>greet()</p>
<hr>
<p>hello</p>
</blockquote>
<p>这个示例演示了最简单的函数结构，<code>1</code>代码行使用关键字def来告诉python你要定义一个函数。<strong>最后定义以冒号结尾</strong></p>
<p><code>2</code>处的文本是被称为文档字符串的注释，描述了函数是做什么的。文档字符串用三括号括起，python使用它们来生成有关程序中的文档。</p>
<h4 id="7-1-1-向函数传递信息"><a href="#7-1-1-向函数传递信息" class="headerlink" title="7.1.1 向函数传递信息"></a>7.1.1 向函数传递信息</h4><blockquote>
<p>def greet(username)</p>
<p>​    “””显示简单的问候语”””</p>
<p>​    print(“hello,” + username.title() + “!” )</p>
<p>greet(‘jesse’)</p>
<hr>
<p>hello, Jesse!</p>
</blockquote>
<h4 id="7-1-2-实参和形参"><a href="#7-1-2-实参和形参" class="headerlink" title="7.1.2 实参和形参"></a>7.1.2 实参和形参</h4><ul>
<li>知道什么是实参，形参就行。</li>
</ul>
<h3 id="7-2-传递实参"><a href="#7-2-传递实参" class="headerlink" title="7.2 传递实参"></a>7.2 传递实参</h3><h4 id="7-2-1-位置实参"><a href="#7-2-1-位置实参" class="headerlink" title="7.2.1 位置实参"></a>7.2.1 位置实参</h4><p>调用函数时，python必须将函数调用中每个实参都关联到函数定义的一个形参。为此，最简单的关联方法就是基于实参的顺序。这种关联方法被称为<strong>位置实参</strong>。</p>
<h4 id="7-2-2-关键字实参"><a href="#7-2-2-关键字实参" class="headerlink" title="7.2.2 关键字实参"></a>7.2.2 关键字实参</h4><ul>
<li>关键字实参是传递给函数的名称-值对。你直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</li>
</ul>
<blockquote>
<p>def pet (animal,name):</p>
<p>​    “””显示宠物信息”””</p>
<p>​    print(“\nI have a “ + animal + “.”)</p>
<p>​    print(“My “ + animal + “ ‘s name is” + name.title() + “. “)</p>
<p>pet(animal=’hamster’,name=’harry’)<code>1</code></p>
</blockquote>
<p><code>1</code>两个形参顺序变了也可以</p>
<h4 id="7-2-3-默认值"><a href="#7-2-3-默认值" class="headerlink" title="7.2.3 默认值"></a>7.2.3 默认值</h4><ul>
<li>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，python将使用指定的实参值；否则，将使用形参的默认值。</li>
<li>但是要<strong>注意顺序</strong>，最好把有默认值的形参放到后面</li>
</ul>
<h4 id="7-2-4-避免实参错误"><a href="#7-2-4-避免实参错误" class="headerlink" title="7.2.4 避免实参错误"></a>7.2.4 避免实参错误</h4><p>提供的实参多于或少于函数完成其工作所需的信息时，将出现实参不匹配错误。</p>
<h3 id="7-3-返回值"><a href="#7-3-返回值" class="headerlink" title="7.3 返回值"></a>7.3 返回值</h3><ul>
<li>有时可以在形参上设置空字符串</li>
</ul>
<blockquote>
<p>def get (first,name,laugage= ‘ ‘)</p>
<p>​    if laugage:</p>
<p>​        ………….</p>
<p>​    else :</p>
<p>​        ………………</p>
</blockquote>
<ul>
<li><p>返回字典</p>
<p>函数可以返回任何类型的值，包括列表和字典等较复杂得到数据结构。</p>
</li>
</ul>
<h3 id="7-4-传递列表"><a href="#7-4-传递列表" class="headerlink" title="7.4 传递列表"></a>7.4 传递列表</h3><ul>
<li>可以把列表传在函数中，再再函数中使用for循环处理列表</li>
<li>没啥可说的，</li>
</ul>
<h3 id="7-5-传递任意数量的实参"><a href="#7-5-传递任意数量的实参" class="headerlink" title="7.5 传递任意数量的实参"></a>7.5 传递任意数量的实参</h3><ul>
<li>有时候，预先不知道函数需要接受多少实参，好在python允许函数从调用语句中收集任意数量的实参。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>python(二)(简)</title>
    <url>/2021/03/02/python(%E4%BA%8C)%20(%E4%BB%8E%E7%AE%80)/</url>
    <content><![CDATA[<h2 id="04-if语句"><a href="#04-if语句" class="headerlink" title="04.if语句"></a>04.if语句</h2><h3 id="4-1-一个简单的示例"><a href="#4-1-一个简单的示例" class="headerlink" title="4.1 一个简单的示例"></a>4.1 一个简单的示例</h3><blockquote>
<p> cars =[‘audi’,’bmw’,’subaru’]</p>
<p> for car in cars:</p>
<p>​    if car == ‘bmw’:</p>
<p>​        print(car.upper())</p>
<p>​    else</p>
<p>​        print(car.title())</p>
<hr>
<p>Audi</p>
<p>BMW</p>
<p>Subaru</p>
<p>Toyota</p>
</blockquote>
<ul>
<li>这个示例中的循环首先检查当前的汽车名是否是’bmw’，如果是，就以全大写的方式打印它：否则就以首字母大写的方式打印</li>
<li>这个示例涵盖了本章将介绍的很多概念。下面先来介绍可用来在程序中检查条件的测试</li>
</ul>
<h3 id="4-2-条件测试"><a href="#4-2-条件测试" class="headerlink" title="4.2 条件测试"></a>4.2 条件测试</h3><ul>
<li><p>比较字符串和数字，和c一样；</p>
</li>
<li><p>检查多个条件时</p>
<ul>
<li>使用and(or)检查多个条件 (两个条件之间用and(or))</li>
<li>为了多个条件看起来方便，每个条件可以加上括号</li>
</ul>
</li>
<li><p>检查特定值是否包含在列表中</p>
<ul>
<li><p>使用关键字in</p>
</li>
<li><p>例如</p>
<blockquote>
<p>re = [‘a’,’b’,’c’]</p>
<p>‘a’ in re</p>
<hr>
<p>True</p>
</blockquote>
</li>
<li><p>检查特定值是否不包含在列表中 将in改为not in</p>
</li>
</ul>
</li>
<li><p>布尔表达式</p>
<p>Ture和False</p>
</li>
</ul>
<h3 id="4-3-if语句"><a href="#4-3-if语句" class="headerlink" title="4.3 if语句"></a>4.3 if语句</h3><h4 id="4-3-2-if-else语句"><a href="#4-3-2-if-else语句" class="headerlink" title="4.3.2 if-else语句"></a>4.3.2 if-else语句</h4><p>例子：</p>
<blockquote>
<p>age = 17</p>
<p>if age &gt;= 18</p>
<p>​    print(‘yes’)</p>
<p>else:</p>
<p>​    print(‘no’)</p>
<hr>
<p>no</p>
</blockquote>
<h4 id="4-3-3-if-elif-else结构"><a href="#4-3-3-if-elif-else结构" class="headerlink" title="4.3.3 if-elif-else结构"></a>4.3.3 if-elif-else结构</h4><p>例子：</p>
<blockquote>
<p>age = 12</p>
<p>if age &lt; 4:</p>
<p>​    print(‘123’)</p>
<p>elif age &lt; 18:</p>
<p>​    print(‘456’)</p>
<p>else:</p>
<p>​    print(‘789’)</p>
<hr>
<p>456</p>
</blockquote>
<ul>
<li>可以使用多个elif代码块</li>
<li>最后的else可以省略</li>
</ul>
<h3 id="4-4-使用if语句处理列表"><a href="#4-4-使用if语句处理列表" class="headerlink" title="4.4 使用if语句处理列表"></a>4.4 使用if语句处理列表</h3><ul>
<li><p>可以用来确定列表是否是空的</p>
<p>例子：</p>
<blockquote>
<p>requested = []</p>
<p>if requested:</p>
<p>​    print(“yes”)</p>
<p>else:</p>
<p>​    print(‘no’)</p>
<hr>
<p>no</p>
</blockquote>
</li>
</ul>
<h2 id="05-字典"><a href="#05-字典" class="headerlink" title="05. 字典"></a>05. 字典</h2><h3 id="5-1-一个简单的字典"><a href="#5-1-一个简单的字典" class="headerlink" title="5.1 一个简单的字典"></a>5.1 一个简单的字典</h3><blockquote>
<p>a = {‘color’:’green’, ‘point’:5}</p>
<p>print(a[‘color’])<code>1</code></p>
<p>print([‘point’])<code>2</code></p>
<hr>
<p>green</p>
<p>5</p>
</blockquote>
<h3 id="5-2-使用字典"><a href="#5-2-使用字典" class="headerlink" title="5.2 使用字典"></a>5.2 使用字典</h3><p>在python中，字典是以系列<strong>键-值</strong>对。每个键都与一个值相关联，可以用键来访问与之相关联的值。</p>
<p>与键相关联的值可以是<strong>数字 字符串 列表</strong>乃至<strong>字典</strong>。事实上，可将任何python对象用作字典中的值。</p>
<h4 id="5-2-1访问字典中的值"><a href="#5-2-1访问字典中的值" class="headerlink" title="5.2.1访问字典中的值"></a>5.2.1访问字典中的值</h4><p>例如<code>1</code> <code>2</code></p>
<h4 id="5-2-2-添加键-值对"><a href="#5-2-2-添加键-值对" class="headerlink" title="5.2.2 添加键-值对"></a>5.2.2 添加键-值对</h4><p>字典是一种动态结构，可随时在其中添加键-值对，可依次指定字典名、用方括号括气的键和相关的值。</p>
<blockquote>
<p>alien = {‘color’:’green, ‘point’:5}</p>
<p>print(alien)</p>
<p>alien[‘x’] = 0</p>
<p>alien[‘y’] = 25</p>
<p>print(alien)</p>
<hr>
<p>{‘color’:’green, ‘point’:5}</p>
<p>{‘color’:’green,   ‘point’:5,    ‘x’:0,    ‘y’:25}</p>
</blockquote>
<p><strong>注意</strong> python不关心键-值对的添加顺序，而只关心键和值之间的关联关系。</p>
<h4 id="5-2-3-先创建一个空字典"><a href="#5-2-3-先创建一个空字典" class="headerlink" title="5.2.3 先创建一个空字典"></a>5.2.3 先创建一个空字典</h4><p>alien = {}</p>
<h4 id="5-2-4-修改字典中的值"><a href="#5-2-4-修改字典中的值" class="headerlink" title="5.2.4 修改字典中的值"></a>5.2.4 修改字典中的值</h4><p>和理想中的修改方法相同</p>
<h4 id="5-2-5-删除键-值对"><a href="#5-2-5-删除键-值对" class="headerlink" title="5.2.5 删除键-值对"></a>5.2.5 删除键-值对</h4><p><strong>对于字典中不再需要的信息，可使用del语句将相应的键-值对彻底删除。使用del语句时，必须指定字典名和要删除的键。</strong></p>
<p>eg：del alien(‘point’)</p>
<p>上面代码行让python将键‘point’从字典alien删除，同时删除与这个键相关联的值。</p>
<h4 id="5-2-6-由类似对象组成的字典"><a href="#5-2-6-由类似对象组成的字典" class="headerlink" title="5.2.6 由类似对象组成的字典"></a>5.2.6 由类似对象组成的字典</h4><p>在前面的示例中，字典存储的是一个对象的多种信息，但是你也可以使用字典来存储众多对象的同一种信息：</p>
<p>eg</p>
<p>favorite_languages = {</p>
<p>​    ‘a’: ‘python’,</p>
<p>​    ‘b’:’c’,</p>
<p>​    ‘c’:’python’,</p>
<p>​    ‘d’:’java’,     #最后一行也用逗号，方便添加</p>
<p>​    }</p>
<p>这种字典，输入人名，就可以直接输出这个人最喜欢的语言</p>
<h3 id="5-3-遍历字典"><a href="#5-3-遍历字典" class="headerlink" title="5.3 遍历字典"></a>5.3 遍历字典</h3><p>有多种遍历字典的方式：可遍历字典的所有键-值对、键或值</p>
<h4 id="5-3-1-遍历所有键-值对"><a href="#5-3-1-遍历所有键-值对" class="headerlink" title="5.3.1 遍历所有键-值对"></a>5.3.1 遍历所有键-值对</h4><blockquote>
<p>user = {</p>
<p>​    ‘username’: ‘eeee’,</p>
<p>​    ‘first’:’mmmm’,</p>
<p>​    ‘last’:’kkkk’,</p>
<p>​    }</p>
<p>for k,v in user.items():<code>1</code> # k v是随便设置的临时变量</p>
<p>​    print(‘\n’ + k)</p>
<p>​    print(v)</p>
<hr>
<p>last</p>
<p>kkkk</p>
<p>first</p>
<p>mmmm</p>
<p>username</p>
<p>eeee</p>
</blockquote>
<p>注意，即使遍历字典时，键-值对的返回顺序也与存储顺序不同。python不关心键-值对的存储顺序，而只关心键和值之间的关联关系。</p>
<h4 id="5-3-2-遍历字典中所有的键"><a href="#5-3-2-遍历字典中所有的键" class="headerlink" title="5.3.2 遍历字典中所有的键"></a>5.3.2 遍历字典中所有的键</h4><p>只需要把以上<code>1</code>改为</p>
<p>for k in user.keys()<code>2</code></p>
<p><strong>实际上，keys()是可以省略的</strong></p>
<ul>
<li><p>user.key()是把字典中的键单独列出来组成一个列表</p>
</li>
<li><p>按顺序遍历字典中的所有键</p>
<ul>
<li><p>在<code>2</code>基础上修改一下：</p>
<p>for k in sorted(user.key())</p>
<p><strong>（这样是按照首字母abcde的顺序）</strong></p>
</li>
</ul>
</li>
</ul>
<h4 id="5-3-3-遍历字典中的所有值"><a href="#5-3-3-遍历字典中的所有值" class="headerlink" title="5.3.3 遍历字典中的所有值"></a>5.3.3 遍历字典中的所有值</h4><p>同理 将<code>1</code>改为</p>
<p>for v in user.values()</p>
<p>上列代码改为</p>
<p>for v in set(user.values())</p>
<p>可以把重复的value去掉，结果是一个不重复的列表，其中列出了所有的值。</p>
<h3 id="5-3-嵌套"><a href="#5-3-嵌套" class="headerlink" title="5.3 嵌套"></a>5.3 嵌套</h3><ul>
<li> 有时候需要将一系列字典存储在列表中，或将列表作为值存储在字典中</li>
</ul>
<h4 id="5-3-1-字典列表"><a href="#5-3-1-字典列表" class="headerlink" title="5.3.1 字典列表"></a>5.3.1 字典列表</h4><p>有时一个字典只包含一个外星人信息，但无法存储第二个外星人信息，更别说所有的外星人信息了。如果创建一个列表，其中每一个外星人都是一个字典，包含有关外星人信息。就可以管理成群结队的外星人了。</p>
<blockquote>
<p>alien_0 = {‘color’:’green’,’point’:5}</p>
<p>alien_1 = {‘color’:’yellow’,’point’:10}</p>
<p>alien_2 = {‘color’:’blue’,’point’:15}</p>
<p>aliens = [alien_0,alien_1,alien_2]</p>
<p>for alien in aliens:</p>
<p>​    print(alien)</p>
<hr>
<p>{‘color’:’green’,’point’:5}</p>
<p>{‘color’:’yellow’,’point’:10}</p>
<p>{‘color’:’blue’,’point’:15}</p>
</blockquote>
<h4 id="5-3-2-在字典中存储列表"><a href="#5-3-2-在字典中存储列表" class="headerlink" title="5.3.2 在字典中存储列表"></a>5.3.2 在字典中存储列表</h4><p>没什么特殊的，举例</p>
<blockquote>
<p>favorite_languages = {</p>
<p>​    ‘jen’: [‘python’,’ruby’],</p>
<p>​    ‘sarsh’:[‘c’],</p>
<p>​    ‘edward’:[‘ruby’,’go’],</p>
<p>​    ‘phil’:[‘python’,’haskell’],</p>
<p>​    }</p>
<p>for name,language in favorite_items():</p>
<p>​    print(“\n” + name.title() + “ ‘s favorite languages are:”)</p>
<p>​    for language in languages:</p>
<p>​        print(“\t” + language.title())</p>
<hr>
<p>Jen’s favorite languages are:</p>
<p>​    Python</p>
<p>​    Ruby</p>
<p>Sarch’s favorite languages are:</p>
<p>​    C</p>
<p>Phil’s favorite languages are:</p>
<p>​    Python</p>
<p>​    Haskell</p>
<p>Edward’s favorite languages are:</p>
<p>​    Ruby</p>
<p>​    Go</p>
</blockquote>
<p>以上代码就是输出每个人喜欢的多个语言</p>
<h4 id="5-4-3-字典中存储字典"><a href="#5-4-3-字典中存储字典" class="headerlink" title="5.4.3 字典中存储字典"></a>5.4.3 字典中存储字典</h4><p>同上</p>
<blockquote>
<p>user = {</p>
<p>​    ‘aeinstein’:{</p>
<p>​        ‘first’:’albert’,</p>
<p>​        ‘last’:’elinstein’,</p>
<p>​        ‘location’:’princeton’,</p>
<p>​        },</p>
<p>​    ‘mcurite’:{</p>
<p>​        ‘first’:’marie’,</p>
<p>​        ‘last’:’curie’,</p>
<p>​        ‘location’:’paris’,</p>
<p>​        },</p>
<p>​    }</p>
<p>for username,use_info in user.items():</p>
<p>​    print(“\nUsername:” + username)</p>
<p>​    full_name = user_info[‘first’] + “ “ + user_info[‘last’]</p>
<p>​    location = user_info[‘location’]</p>
<p>​    print(“\tFull name: “ + full_name.title())</p>
<p>​    print(“\tLocation:” + location.title())</p>
<hr>
<p>Username:aeinstein</p>
<p>​    Full name: Albert Einstein</p>
<p>​    Location:Princeton</p>
<p>Username:mcurie</p>
<p>​    Full name: Marie Curite</p>
<p>​    Location: Paris</p>
</blockquote>
<h2 id="06-用户输入和while循环"><a href="#06-用户输入和while循环" class="headerlink" title="06.用户输入和while循环"></a>06.用户输入和while循环</h2><h3 id="6-1-函数-input-的工作原理"><a href="#6-1-函数-input-的工作原理" class="headerlink" title="6.1 函数 input()的工作原理"></a>6.1 函数 input()的工作原理</h3><ul>
<li><p>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，python将其存储在一个变量中，以方便使用。</p>
<blockquote>
<p>message = input(“Tell me something”)</p>
<p>print(message)</p>
<hr>
<p>Tell me something  Hello #这个hello是用户输入的</p>
<p>Hello</p>
</blockquote>
</li>
<li><p>input参数信息一定要用好，要让用户知道这里是填写什么的</p>
</li>
</ul>
<h4 id="6-1-1-使用int-来获取数值输入"><a href="#6-1-1-使用int-来获取数值输入" class="headerlink" title="6.1.1 使用int()来获取数值输入"></a>6.1.1 使用int()来获取数值输入</h4><p>有时你根据input()使用户输入数字，但是python用读取字符串的方式读取数字，导致你无法进行数字的比较时。用int()可以将这个字符串转换成数字表示。</p>
<blockquote>
<p>&gt;&gt;&gt;age = input(“how old are you?”)</p>
<p>how old are you?  21</p>
<p>&gt;&gt;&gt;age = int (age)</p>
<p>&gt;&gt;&gt;age &gt;= 18</p>
<p>Ture</p>
</blockquote>
<ul>
<li>在数值输入用于比较和计算前，务必将其转换为数值表示。</li>
</ul>
<h4 id="6-1-2-求模运算符"><a href="#6-1-2-求模运算符" class="headerlink" title="6.1.2 求模运算符"></a>6.1.2 求模运算符</h4><blockquote>
<p>4 %3 </p>
<p>7%3</p>
<hr>
<p>1</p>
<p>1</p>
</blockquote>
<p>求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少。</p>
<p><strong>n % 2这个运算可以判断一个数是否是偶数</strong></p>
<h3 id="6-2-while循环介绍"><a href="#6-2-while循环介绍" class="headerlink" title="6.2 while循环介绍"></a>6.2 while循环介绍</h3><p>for循环用于针对集合中的每一个元素都一个代码块，而while循环不断地运行，直到指定的条件不满足为止。</p>
<h4 id="6-2-1-使用while循环"><a href="#6-2-1-使用while循环" class="headerlink" title="6.2.1 使用while循环"></a>6.2.1 使用while循环</h4><blockquote>
<p>number = 1</p>
<p>while number &lt;= 5:</p>
<p>​    print(number)</p>
<p>​    number += 1</p>
<hr>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
</blockquote>
<h4 id="6-2-2-让用户选择何时退出"><a href="#6-2-2-让用户选择何时退出" class="headerlink" title="6.2.2 让用户选择何时退出"></a>6.2.2 让用户选择何时退出</h4><p>没什么好说的 这个while循环的一个好处就是，可以一直循环，直到你(用户)不想让他循环为止</p>
<ul>
<li>为了简化while循环里的语句，可以把while里的条件改成一个<strong>标识</strong>，这个标识在while循环外面被指定ture或false。ture时，循环(程序)继续，false时，循环(程序)结束</li>
</ul>
<p><strong>(看不懂也没关系，就是一种简化代码的手段，代码写多了自然就会了)</strong></p>
<h4 id="6-2-3-使用break退出循环"><a href="#6-2-3-使用break退出循环" class="headerlink" title="6.2.3 使用break退出循环"></a>6.2.3 使用break退出循环</h4><p>和c一样。</p>
<h4 id="6-2-4-在循环中使用continue"><a href="#6-2-4-在循环中使用continue" class="headerlink" title="6.2.4 在循环中使用continue"></a>6.2.4 在循环中使用continue</h4><p>举例说明一切</p>
<blockquote>
<p>number = 0</p>
<p>while number &lt;= 10:</p>
<p>​    number += 1</p>
<p>​    if number % 2 ==0:</p>
<p>​        continue</p>
<p>​    print(number)</p>
<hr>
<p>1</p>
<p>3</p>
<p>5</p>
<p>7</p>
<p>9</p>
</blockquote>
<p>break 和 continue都是针对当前循环</p>
<h4 id="6-2-5-避免无限循环"><a href="#6-2-5-避免无限循环" class="headerlink" title="6.2.5 避免无限循环"></a>6.2.5 避免无限循环</h4><p>如果进行了无限循环，可按Ctrl + C，也可以关闭显示程序输出的终端窗口</p>
<ul>
<li>有些编译器内嵌了输出窗口，这可能导致循环难以结束，因此不得不关闭编译器来结束无限循环。</li>
</ul>
<h3 id="6-3-使用while循环来处理列表和字典"><a href="#6-3-使用while循环来处理列表和字典" class="headerlink" title="6.3 使用while循环来处理列表和字典"></a>6.3 使用while循环来处理列表和字典</h3><p>for循环是一种遍历列表的有效方式，但在for循环中不应该修改列表，否则将导致python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。</p>
<p><strong>没啥新奇的，有意可看p110</strong></p>
]]></content>
  </entry>
  <entry>
    <title>王爽汇编语言笔记</title>
    <url>/2021/03/02/%E7%8E%8B%E7%88%BD%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_39654127/article/details/88698911?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161464731216780265426342%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161464731216780265426342&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-3-88698911.pc_search_result_hbase_insert&utm_term=%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0">王爽汇编语言笔记</a></p>
<p><a href="https://blog.csdn.net/wxh0000mm/article/details/98042631?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161464731216780265426342%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161464731216780265426342&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-98042631.pc_search_result_hbase_insert&utm_term=%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0">王爽汇编语言笔记</a></p>
<p>两个贼强的md文档汇编笔记，结合书去看</p>
]]></content>
  </entry>
  <entry>
    <title>python （一）</title>
    <url>/2021/03/01/python(%E4%B8%80)%20/</url>
    <content><![CDATA[<h1 id="python编程-（一）"><a href="#python编程-（一）" class="headerlink" title="python编程 （一）"></a>python编程 （一）</h1><p><strong>.py **: 表示这是一个</strong>python<strong>程序，因此编辑器将使用</strong>python解释器**来运行</p>
<h2 id="01-变量和简单数据类型"><a href="#01-变量和简单数据类型" class="headerlink" title="01.变量和简单数据类型"></a>01.变量和简单数据类型</h2><h3 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h3><ul>
<li><p>message = “hello world”</p>
<p>print(message)</p>
<p>这个程序输出:</p>
<p>hello world</p>
</li>
</ul>
<h4 id="1-1-1-变量的命令和使用"><a href="#1-1-1-变量的命令和使用" class="headerlink" title="1.1.1 变量的命令和使用"></a>1.1.1 变量的命令和使用</h4><ul>
<li><p>在python中使用变量时，需要遵守一些规则和指南。违反这些规则会引发错误，而指南是为了让你编写的代码更容易阅读和理解。</p>
<ul>
<li>变量名只能包含字母，数字和下划线。变量名可以用字母或下划线打头，但<strong>不能以数字打头</strong></li>
<li>变量名不能包括空格，可以用下划线来分隔其中单词</li>
<li>不要使用python关键字和函数名用作变量名</li>
<li>变量名应<strong>简短</strong>且具有<strong>描述性</strong></li>
<li>少用小写字母l和大写字母O,可能会被认为是1和0；</li>
</ul>
<p><strong>注意</strong>：应多用小写的python变量名</p>
</li>
<li><p>在不小心错误拼写变量名时，(例如:message = “abc”  print(masage)),python解释器会提供<strong>traceback</strong></p>
</li>
</ul>
<h3 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a>1.2 字符串</h3><ul>
<li>字符串就是一系列字符，在python中 用引号括起来的都是字符串，其中的引号可以是单引号，也可以使双引号。这种灵活性，能够在字符串中包括引号和撇号：<ul>
<li>‘I told my friend, “python is my favorite language!” ‘</li>
</ul>
</li>
</ul>
<h4 id="1-2-1-使用方法修改字符串的大小写"><a href="#1-2-1-使用方法修改字符串的大小写" class="headerlink" title="1.2.1 使用方法修改字符串的大小写"></a>1.2.1 使用方法修改字符串的大小写</h4><ul>
<li><p>name = ‘ada lovelace’</p>
<p>print(‘name.title()’)</p>
<p>print(‘name.upper()’)</p>
<p>print(‘name.lower()’)</p>
<p>输入：</p>
<p>Ada Lovelace</p>
<p>ADA LOVELACE</p>
<p>ada lovelace</p>
</li>
</ul>
<h4 id="1-2-2-合并（拼接）字符串"><a href="#1-2-2-合并（拼接）字符串" class="headerlink" title="1.2.2 合并（拼接）字符串"></a>1.2.2 合并（拼接）字符串</h4><ul>
<li><p>first_name = “ada”</p>
<p>last_name = “lovelace”</p>
<p>full_name = first_name + “ “ + last_name</p>
<p>print(“hello, “ + full_name.title() + “!”)</p>
<p>输出：</p>
<p>“hello, Ada Lovelace!”</p>
</li>
</ul>
<h4 id="1-2-3-使用制表符或换行符来添加空白"><a href="#1-2-3-使用制表符或换行符来添加空白" class="headerlink" title="1.2.3 使用制表符或换行符来添加空白"></a>1.2.3 使用制表符或换行符来添加空白</h4><ul>
<li>要在字符串中添加制表符，可使用字符组合\t</li>
<li>要在字符串中添加换行符，可使用字符组合\n</li>
<li>两个符号可同时连用</li>
</ul>
<h4 id="1-2-4-删除空白"><a href="#1-2-4-删除空白" class="headerlink" title="1.2.4 删除空白"></a>1.2.4 删除空白</h4><ul>
<li>python能够发现<strong>字符串</strong>中多余的空白，并认为他是有意义的。</li>
<li>rstrip()是删除后面（右面）的空白,lstrip()是删除前面（左边）的空白,strip()是删除两边的空白。</li>
</ul>
<h4 id="1-2-5-使用字符串时避免语法错误"><a href="#1-2-5-使用字符串时避免语法错误" class="headerlink" title="1.2.5 使用字符串时避免语法错误"></a>1.2.5 使用字符串时避免语法错误</h4><ul>
<li><p>一种常见的语法错误：</p>
<p>字符串中包含撇号时，应该使用双引号将字符串括起来，</p>
<p>同理，字符串中包括双引号时，应使用单引号将字符串括起来。</p>
</li>
<li><p>在平时编程时，还会遇见其他很多语法错误，需要我们在平时写代码过程中多注意，总结。</p>
</li>
</ul>
<h4 id="1-2-6-python-2-的print语句"><a href="#1-2-6-python-2-的print语句" class="headerlink" title="1.2.6 python 2 的print语句"></a>1.2.6 python 2 的print语句</h4><p><strong>注意</strong>：python2的print有时候需要(),有时不需要，如下表示:</p>
<ul>
<li>print “hello”               python 2</li>
<li>print (“hello”)             python 2和python 3</li>
</ul>
<h3 id="1-3-数字"><a href="#1-3-数字" class="headerlink" title="1.3 数字"></a>1.3 数字</h3><h4 id="1-3-1-在python中，可对整数进行加减乘除运算："><a href="#1-3-1-在python中，可对整数进行加减乘除运算：" class="headerlink" title="1.3.1 在python中，可对整数进行加减乘除运算："></a>1.3.1 在python中，可对整数进行加减乘除运算：</h4><ul>
<li><p>3 / 2        输出:1.5</p>
</li>
<li><p>使用 ** 表示乘方运算</p>
<p>3 ** 2        输出:9</p>
<p>3 ** 3        输出:27</p>
<p>10 ** 6        输出:1000000</p>
</li>
<li><p>使用()可以改变运算次序，并且运算中的空格不影响python计算表达式的方法</p>
</li>
</ul>
<h3 id="1-3-2-浮点数"><a href="#1-3-2-浮点数" class="headerlink" title="1.3.2 浮点数"></a>1.3.2 浮点数</h3><ul>
<li><p>对于浮点数，python<strong>往往会按照你期望的方式</strong>处理他们，<strong>但是</strong>，要注意的是，结果包含的小数位数是不确定的：</p>
</li>
<li><p>&gt;&gt;&gt;0.2 + 0.1</p>
<p>0.300000000000004</p>
<p>&gt;&gt;&gt;3 * 0.1</p>
<p>0.300000000000004</p>
<p>所有语言都会存在这种问题，不需要担心</p>
</li>
</ul>
<h4 id="1-3-3-使用函数str-避免类型错误"><a href="#1-3-3-使用函数str-避免类型错误" class="headerlink" title="1.3.3 使用函数str() 避免类型错误"></a>1.3.3 使用函数str() 避免类型错误</h4><p>下列代码会产生<strong>类型错误</strong>：</p>
<p>&gt;&gt;&gt; age = 23</p>
<p>message = “happy” + age<code>1</code> + “rd birthday!” </p>
<p>print(message)</p>
<p>运行这个代码，将发现他们会引发错误；</p>
<p><code>Typeerror: Can&#39;t convert &#39;int&#39; object to str implicitly</code></p>
<p>这是一个类型错误，意味着python无法识别你使用的信息，python发现你使用了一个值为整数（int）的变量，但他不知道如何解读这个值。因此，调用函数str(),它将<strong>非字符串</strong>表示为<strong>字符串</strong></p>
<p>对于上述代码，将<code>1</code>改为str(age)即可。</p>
<h4 id="1-3-1-python-2中的整数"><a href="#1-3-1-python-2中的整数" class="headerlink" title="1.3.1 python 2中的整数"></a>1.3.1 python 2中的整数</h4><p>python返回3 / 2的结果为1，而不是1.5。在python中，整数除法的结果只包含整数部分，小数部分<strong>被直接删除</strong></p>
<p>python 2中为了避免这种情况，要确保至少有哦一个操作数为浮点数，这样的结果也为浮点数:</p>
<p>&gt;&gt;&gt;3.0 / 2</p>
<p>1.5(或者)</p>
<p>&gt;&gt;&gt;3 / 2.0</p>
<p>1.5</p>
<h3 id="1-4-注释"><a href="#1-4-注释" class="headerlink" title="1.4 注释"></a>1.4 注释</h3><h4 id="1-4-1如何编写注释"><a href="#1-4-1如何编写注释" class="headerlink" title="1.4.1如何编写注释"></a>1.4.1如何编写注释</h4><p>在python中，注释符号用(#)标识，‘#‘ 后面的内容都会被解释器忽略</p>
<h4 id="1-4-2-该编写什么样的注释"><a href="#1-4-2-该编写什么样的注释" class="headerlink" title="1.4.2 该编写什么样的注释"></a>1.4.2 该编写什么样的注释</h4><ul>
<li>编写猪似的主要目的是阐述代码要做什么，以及是如何做的。以清晰的语言自然对解决方案进行概述，可以解决很多时间。</li>
<li>如果不确定是否要编写注释，就问问自己，找到合理的解决方案前，如果有多个解决方案。都可以注释下来，相比回过头再去添加注释，删除多余的注释要容易的多。</li>
</ul>
<h2 id="02-列表简介"><a href="#02-列表简介" class="headerlink" title="02.列表简介"></a>02.列表简介</h2><h3 id="2-1-什么是列表"><a href="#2-1-什么是列表" class="headerlink" title="2.1 什么是列表"></a>2.1 什么是列表</h3><ul>
<li><p>列表由一系列按特定顺序排列的元素组成，在python中，用方括号[]来表示列表，并用逗号来分隔其中的元素。</p>
</li>
<li><p>&gt;&gt;&gt;a = [‘b’,’c’,’d’]</p>
<p>print(a)</p>
<p>如果你让python将列表打印出来，python将打印列表的内部表示，包括方括号：</p>
<p>[‘b’,’c’,’d’]</p>
</li>
</ul>
<h4 id="2-1-1-访问列表元素"><a href="#2-1-1-访问列表元素" class="headerlink" title="2.1.1 访问列表元素"></a>2.1.1 访问列表元素</h4><ul>
<li>先举个例子</li>
</ul>
<blockquote>
<p>&gt;&gt;&gt;  a = [‘baaa’,’c’,’d’]</p>
</blockquote>
<blockquote>
<p>print(a[0])                                  </p>
</blockquote>
<hr>
<blockquote>
<p>baaa</p>
</blockquote>
<ul>
<li>还可以对任何列表元素调用字符串方法，例如，可以使用方法title()，让元素格式更加整洁</li>
</ul>
<blockquote>
<p>&gt;&gt;&gt;  a = [‘baaa’,’c’,’d’]</p>
</blockquote>
<blockquote>
<p>print(a[0].title())                                  </p>
</blockquote>
<hr>
<blockquote>
<p>Baaa</p>
</blockquote>
<h4 id="2-1-2-索引是从0开始不是从1开始"><a href="#2-1-2-索引是从0开始不是从1开始" class="headerlink" title="2.1.2 索引是从0开始不是从1开始"></a>2.1.2 索引是从0开始不是从1开始</h4><ul>
<li>如题</li>
<li>python为了访问最后一个列表元素提供了一种特殊语法。通过将索引指定为-1，可让python返回最后一个列表元素，同理索引指定为-2，可以返回倒数第二个元素</li>
</ul>
<blockquote>
<p>&gt;&gt;&gt;a = [‘b’,’c’,’d’]</p>
<p>print(a[-1])</p>
<p>print(a[-2])</p>
<hr>
<p>d</p>
<p>c</p>
</blockquote>
<p>因为经常需要在不知道列表长度的情况下访问最后的元素,这个语法会让部分操作方便很多</p>
<h4 id="2-1-3-使用列表中各个值"><a href="#2-1-3-使用列表中各个值" class="headerlink" title="2.1.3 使用列表中各个值"></a>2.1.3 使用列表中各个值</h4><ul>
<li>可像使用其他变量一样使用列表中的各个值，例如，你可以使用拼接根据列表中的值来创造消息</li>
</ul>
<blockquote>
<p>&gt;&gt;&gt; a = [‘b’,’c’,’d’]</p>
<p>f = “yi giao “ + a[0].title() + “.”</p>
<p>print(f)</p>
<hr>
<p>yi giao B.</p>
</blockquote>
<h3 id="2-2-修改、添加和删除元素"><a href="#2-2-修改、添加和删除元素" class="headerlink" title="2.2 修改、添加和删除元素"></a>2.2 修改、添加和删除元素</h3><h4 id="2-2-1-修改列表元素"><a href="#2-2-1-修改列表元素" class="headerlink" title="2.2.1 修改列表元素"></a>2.2.1 修改列表元素</h4><p>简单的要死，举例</p>
<blockquote>
<p>&gt;&gt;&gt;m = [‘a’,’b’,’c’]</p>
<p>print(m)</p>
<p>m(0) = “f”</p>
<p>print(m)</p>
<hr>
<p>[‘a’,’b’,’c’]</p>
<p>[‘f’,’b’,’c’]</p>
</blockquote>
<h4 id="2-2-2-在列表中添加元素"><a href="#2-2-2-在列表中添加元素" class="headerlink" title="2.2.2 在列表中添加元素"></a>2.2.2 在列表中添加元素</h4><ol>
<li><strong>在文章莫非添加元素</strong></li>
</ol>
<ul>
<li>使用append方法，将元素附加到列表末尾</li>
</ul>
<blockquote>
<p>&gt;&gt;&gt;m = [‘a’,’b’,’c’]</p>
<p>print(m)</p>
<p>m.append(‘adc’)</p>
<p>print(m)</p>
<hr>
<p>[‘a’,’b’,’c’]</p>
<p>[‘a’,’b’,’c’,’adc’]</p>
</blockquote>
<ol start="2">
<li>在列表中插入元素</li>
</ol>
<p>使用方法insert()可在列表的任何位置添加新元素。为此，要指定新元素的索引和值。</p>
<blockquote>
<p>&gt;&gt;&gt;m = [‘a’,’b’,’c’]</p>
<p>m.insert(1,’giao’)</p>
<p>print(m)</p>
<hr>
<p>[‘a’,’giao’,’b’,’c’]</p>
</blockquote>
<p><strong>ps：</strong> 这种操作将列表中既有的每个元素都右移一位。</p>
<h4 id="2-2-3-从列表中删除元素"><a href="#2-2-3-从列表中删除元素" class="headerlink" title="2.2.3 从列表中删除元素"></a>2.2.3 从列表中删除元素</h4><ol>
<li><p><strong>使用del语句删除元素</strong></p>
<blockquote>
<p>&gt;&gt;&gt;m = [‘a’,’b’,’c’]</p>
<p>del m(0)</p>
<p>print(m)</p>
<hr>
<p>[‘b’,’c’]</p>
</blockquote>
</li>
<li><p><strong>使用方法pop()删除元素</strong></p>
<p>有时，你要将元素从列表中删除，并接着使用它的值。例如，你可能需要获取刚被射杀的外星人的x和y坐标，以便在相应的位置显示爆炸效果，或在web应用程序中，你可能要将用户从活跃成员列表中删除，并将其加入到非活跃成员列表中。</p>
<p>方法pop()可删除列表末尾的元素，并让你接着使用它。术语弹出(pop)源自这样的类比：列表就像一个栈，而删除列表末尾的元素相当于弹出栈顶元素。</p>
<blockquote>
<p>&gt;&gt;&gt;m = [‘a’,’b’,’c’]</p>
<p>print(m)</p>
<p>popped_m = m.pop()</p>
<p>print(m)</p>
<p>print(popped_m)</p>
<hr>
<p>[‘a’,’b’,’c’]</p>
<p>[‘a’,’b’]</p>
<p>c</p>
</blockquote>
<p>输出表明，列表末尾的值‘c’已删除，他现在储存在变量popped_m中</p>
</li>
<li><p><strong>弹出列表中任何位置处的元素</strong></p>
<p>实际上，你可以使用pop()来删除列表中任何位置的元素，只需要在括号中指定要删除的元素的索引即可（pop默认索引是列表最后一个）。</p>
<ul>
<li>删除后继续使用就用pop()。</li>
<li>删除后不适用就用del。</li>
</ul>
</li>
<li><p><strong>根据值删除元素</strong></p>
<p> 有时候，你不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值，可使用方法remove(),括号里填字符串，如‘python’。</p>
<blockquote>
<p>&gt;&gt;&gt;m = [‘a’,’b’,’c’,’d’]</p>
<p>print(m)</p>
<p>m.remove(‘c’)  # 让python 确定‘c’出现在列表的什么地方，并将该元素删除：</p>
<p>print(m)</p>
<hr>
<p>[‘a’,’b’,’c’,’d’]</p>
<p>[‘a’,’b’,’d’]</p>
</blockquote>
<p>也可以使用变量赋值为字符串，放在remove()里</p>
<p><strong>注意</strong>：方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</p>
<h3 id="2-3-组织列表"><a href="#2-3-组织列表" class="headerlink" title="2.3 组织列表"></a>2.3 组织列表</h3></li>
</ol>
<p>在你创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。</p>
<h4 id="2-3-1-使用方法sort-对列表进行排序"><a href="#2-3-1-使用方法sort-对列表进行排序" class="headerlink" title="2.3.1 使用方法sort()对列表进行排序"></a>2.3.1 使用方法sort()对列表进行排序</h4><blockquote>
<p>&gt;&gt;&gt; cars = [‘bmw’,’audi’,’toyota’,’subaru’]</p>
<p>cars.sort()</p>
<p>print(cars)</p>
<hr>
<p>[‘audi’,’bmw’,’subaru’,’subaru’]</p>
</blockquote>
<p>如果想让列表倒序，就用sort(reverse=Ture)</p>
<p><strong>ps</strong>:sort()方法对列表元素排列顺序的修改是永久的</p>
<h4 id="2-3-2-使用函数sorted-对列表进行临时排序"><a href="#2-3-2-使用函数sorted-对列表进行临时排序" class="headerlink" title="2.3.2 使用函数sorted()对列表进行临时排序"></a>2.3.2 使用函数sorted()对列表进行临时排序</h4><p>sorted()函数，保留元素原来的排列顺序，同时以特定的顺序呈现他们。</p>
<blockquote>
<p>&gt;&gt;&gt;cars = [‘anm’,’fnm’,’bnm’]</p>
<p>print(sorted(cars))</p>
<p>print(cars)</p>
<hr>
<p>[‘anm’,’bnm’,’fnm’]</p>
<p>[‘anm’,’fnm’,’bnm’]</p>
</blockquote>
<p>与sort相同，倒序的话sorted(cars,serverse=Ture)</p>
<h4 id="2-3-3-倒着打印列表"><a href="#2-3-3-倒着打印列表" class="headerlink" title="2.3.3 倒着打印列表"></a>2.3.3 倒着打印列表</h4><p>要反转列表元素的排列顺序，可使用方法reverse()。</p>
<p>该方法是永久性的修改列表元素的排列顺序，但是只要再次使用reserve()方法，就可以恢复到原来的排列顺序。</p>
<h4 id="2-3-4-确定列表的长度"><a href="#2-3-4-确定列表的长度" class="headerlink" title="2.3.4 确定列表的长度"></a>2.3.4 确定列表的长度</h4><ul>
<li><p>使用函数len()可以快速获取列表的长度</p>
<blockquote>
<p>&gt;&gt;&gt;cars=[‘asdf’,’asf’,’asfas’,’asfasf’]</p>
<p>len(cars)</p>
<hr>
<p>4</p>
</blockquote>
<p>在需要完成如下任务时，len()很有用：确定还有多少个外星人未被射杀，需要管理多少项可视化数据，网站有多少注册用户时。</p>
<h2 id="03-操作列表"><a href="#03-操作列表" class="headerlink" title="03.操作列表"></a>03.操作列表</h2><h3 id="3-1-遍历整个列表"><a href="#3-1-遍历整个列表" class="headerlink" title="3.1 遍历整个列表"></a>3.1 遍历整个列表</h3><p>下面使用for循环来打印魔术师名单中的所有名字</p>
<blockquote>
<p>&gt;&gt;&gt;</p>
<p>magicians = [‘a’,’b’,’c’]</p>
<p>for magician in magicians:<code>1</code></p>
<p>​    print(magician)<code>2</code></p>
<hr>
<p>a</p>
<p>b</p>
<p>c</p>
</blockquote>
<ul>
<li>首先，我们定义了一个列表，我们定义了一个循环<code>1</code>，这行代码让python从列表中取出一个名字，并将其放在变量magician中，这样，对于列表中每一个名字，python都将重复执行后两行<code>1</code>,<code>2</code>代码。</li>
</ul>
<h4 id="3-1-1-深入地研究循环"><a href="#3-1-1-深入地研究循环" class="headerlink" title="3.1.1 深入地研究循环"></a>3.1.1 深入地研究循环</h4><p>循环这种概念很重要，因为它是让计算机自动完成重复工作的常见方式之一。</p>
<p>前面的<code>1</code>代码，让python获取列表第一个值(‘a’)，并将其储存在变量magician中。接下来，Python读取下一行<code>2</code>代码：</p>
<p>这行代码让python打印magician的值(‘a’),由于该列表还包含其他值，Python返回到循环第一行<code>1</code>，</p>
<p>python获取列表中的下一个名字(‘b’)，并将其储存到变量magician中，在执行下一行代码<code>2</code></p>
<ul>
<li>循环一般会把列表所有元素都按照指定步骤执行到结束</li>
<li>for循环的·临时变量最好选择描述单个列表元素有意义的名称</li>
</ul>
<p>在代码行<code>1</code>后面，每个缩进的代码行都是循环的一部分，将针对列表中的每个值都执行一次。</p>
<p>在for循环结束后执行一些操作，（不缩进即可）</p>
</li>
</ul>
<h3 id="3-2避免缩进错误"><a href="#3-2避免缩进错误" class="headerlink" title="3.2避免缩进错误"></a>3.2避免缩进错误</h3><p><strong>以下是常见的缩进错误</strong></p>
<ul>
<li><p>忘记缩进</p>
</li>
<li><p>不必要的缩进</p>
</li>
<li><p>python会指出来，不必要的缩进是错误的</p>
</li>
<li><p>循环后不必要的缩进</p>
</li>
<li><p>遗漏了冒号（<code>2</code>后面的：）</p>
<ul>
<li><p>for语句末尾的冒号告诉python，下一行是循环的第一行。</p>
<p>如果不小心遗漏了冒号，将导致语法错误，因为python不知道你意欲何为。这种错误虽然容易消除，但是不容易被发现。</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-3-创建数值列表"><a href="#3-3-创建数值列表" class="headerlink" title="3.3 创建数值列表"></a>3.3 创建数值列表</h3><h4 id="3-3-1-使用函数range"><a href="#3-3-1-使用函数range" class="headerlink" title="3.3.1 使用函数range()"></a>3.3.1 使用函数range()</h4><blockquote>
<p>for value in range(1,5):</p>
<p>​    print(value)</p>
<hr>
<p>1 </p>
<p>2</p>
<p>3</p>
<p>4</p>
</blockquote>
<p>在这个实例中，只打印1到4，想打印1到5，应该用range(1,6)</p>
<h4 id="3-3-2-使用range-创建数字列表"><a href="#3-3-2-使用range-创建数字列表" class="headerlink" title="3.3.2 使用range()创建数字列表"></a>3.3.2 使用range()创建数字列表</h4><ul>
<li>要创建数字列表，可使用函数list()将range()的结果直接转换为列表。如果range()作为list()的参数，输出将为一个列表</li>
</ul>
<blockquote>
<p>number = list (range(1,6))</p>
<p>print(numbers)</p>
<hr>
<p>[1,2,3,4,5]</p>
</blockquote>
<blockquote>
<p>even_numbers = list (range(2,11,2))</p>
<p>print(even_numbers)</p>
<hr>
<p>[2,4,6,8,10]</p>
</blockquote>
<p>在这个实例中，函数range()从2开始数，然后不断地加2，直到达到或超过终值(11)</p>
<p>使用函数range()，几乎可以创建任何需要的数字集，例如：</p>
<blockquote>
<p>square = []</p>
<p>for value in range(1,11)：</p>
<p>​    square = value**2</p>
<p>​    squares.append(square)</p>
<p>print(squares)</p>
<hr>
<p>[1,4,9,16,25,36,49,64,81,100]</p>
</blockquote>
<h4 id="3-3-3-对数字列表执行简单的统计计算"><a href="#3-3-3-对数字列表执行简单的统计计算" class="headerlink" title="3.3.3 对数字列表执行简单的统计计算"></a>3.3.3 对数字列表执行简单的统计计算</h4><ul>
<li><p>min() 数字列表中最小的数</p>
</li>
<li><p>max()数字列表中最大的数</p>
</li>
<li><p>sum()数字列表中所有数的总和</p>
</li>
</ul>
<h4 id="3-3-4-列表解析"><a href="#3-3-4-列表解析" class="headerlink" title="3.3.4 列表解析"></a>3.3.4 列表解析</h4><p>前面介绍的生成列表squares的方法包含三四行代码。而列表解析让你只需编写一行代码就能生成这样的列表。</p>
<ul>
<li>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素</li>
</ul>
<blockquote>
<p>squares = [value**2 for value in range(1,11)]</p>
<p>print(squares)</p>
<hr>
<p>[1,4,9,16,25,36,49,64,81,100]</p>
</blockquote>
<p>(没啥解释的，都是废话，自己领悟)</p>
<h3 id="3-4-使用列表的一部分"><a href="#3-4-使用列表的一部分" class="headerlink" title="3.4 使用列表的一部分"></a>3.4 使用列表的一部分</h3><p>列表的部分元素—–切片</p>
<h4 id="3-4-1-切片"><a href="#3-4-1-切片" class="headerlink" title="3.4.1 切片"></a>3.4.1 切片</h4><p>直接上代码</p>
<blockquote>
<p>players = [‘a’,’b’,’c’,’d’,’e’]</p>
<p>print(palyers[0:3]) <code>1</code># 类似range()</p>
<hr>
<p>[‘a’,’b’,’c’]</p>
</blockquote>
<p>若<code>1</code>是print(palyers[:3]) 也可以，<strong>第一个索引不指定，python将自动从列表开头开始</strong></p>
<p><strong>同理，如果第二个索引不指定，将一直到列表末尾的所有元素</strong></p>
<ul>
<li>若print(palyers[-3:])，则打印最后三个元素</li>
</ul>
<h4 id="3-4-2-遍历切片"><a href="#3-4-2-遍历切片" class="headerlink" title="3.4.2 遍历切片"></a>3.4.2 遍历切片</h4><p>和正常遍历列表没什么区别，只是把列表(eg:list=[……])换成相应切片形式list[n:n](n为数字或者不填)</p>
<p><strong>切片相当于一个新的列表</strong></p>
<h4 id="3-4-3-复制列表"><a href="#3-4-3-复制列表" class="headerlink" title="3.4.3 复制列表"></a>3.4.3 复制列表</h4><p>若</p>
<p>food = [………]</p>
<p>friend_food = food</p>
<p>这里是将food赋给friend_food，而不是将food的副本储存到friend_food，这种语法实际上是让python</p>
<p>将新变量friend_food关联到包含在food中的列表，<strong>因此这两个变量都指向同一个列表</strong>。对其中一个列表进行操作，另一个列表也会相应改变。</p>
<p>但如果</p>
<p>friend_food = food[:]，则会产生我们所期望的效果。</p>
<h3 id="3-5-元组"><a href="#3-5-元组" class="headerlink" title="3.5 元组"></a>3.5 元组</h3><p>列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的角色列表至关重要。然而，有时候需要创建一系列不可修改的元素，元组可以满足这种要求。<strong>python将不能修改的值称为不可变的，而不可变的列表被称为元组。</strong></p>
<ul>
<li><strong>语法类似c语言的数组</strong></li>
</ul>
<h4 id="3-5-1-定义元组"><a href="#3-5-1-定义元组" class="headerlink" title="3.5.1 定义元组"></a>3.5.1 定义元组</h4><blockquote>
<p>a = (500,800)</p>
<p>print(a[0])</p>
<hr>
<p>500</p>
</blockquote>
<ul>
<li>试图修改元组时，会导致python返回类型错误的消息。</li>
</ul>
<h4 id="3-5-2-遍历元组的所有值"><a href="#3-5-2-遍历元组的所有值" class="headerlink" title="3.5.2 遍历元组的所有值"></a>3.5.2 遍历元组的所有值</h4><p>像列表一样，也可以使用for循环来遍历元组中的所有值</p>
<blockquote>
<p>dimensions = (200,50)</p>
<p>for dimension in dimensions:</p>
<p>​    print(dimension)</p>
<hr>
<p>200</p>
<p>50</p>
</blockquote>
<h4 id="3-5-3-修改元组变量"><a href="#3-5-3-修改元组变量" class="headerlink" title="3.5.3 修改元组变量"></a>3.5.3 修改元组变量</h4><ul>
<li>虽然不能修改元组的元素，但可以给存储元组的变量赋值。</li>
</ul>
<p>比如，dimensions = (200,50)</p>
<p>不能</p>
<p>dimensions[0] = 250</p>
<p>但是可以</p>
<p>dimensions = (250,50)</p>
<p><strong>我就觉得很离谱。。。。。。。。。。。。</strong></p>
<h3 id="3-6-设置代码格式"><a href="#3-6-设置代码格式" class="headerlink" title="3.6 设置代码格式"></a>3.6 设置代码格式</h3><ul>
<li>随着编写的代码越来越长，有必要了解一些代码格式设置规定。花时间让你的代码尽可能更加易于阅读。<strong>这点很重要</strong></li>
</ul>
<p>别的都是废话，空行要注意使用，将程序的不同部分分开。</p>
<p>空行不会影响代码的运行，但是会影响代码的可读性。</p>
<p><strong>pep 8格式设置指南</strong>有时间可以了解一下</p>
]]></content>
  </entry>
  <entry>
    <title>python(四)(简)</title>
    <url>/2021/03/04/python%20(%E5%9B%9B)(%E7%AE%80)/</url>
    <content><![CDATA[<h1 id="python-四-简"><a href="#python-四-简" class="headerlink" title="python (四)(简)"></a>python (四)(简)</h1><h2 id="08-类"><a href="#08-类" class="headerlink" title="08. 类"></a>08. 类</h2><h3 id="8-1-创建和使用类"><a href="#8-1-创建和使用类" class="headerlink" title="8.1 创建和使用类"></a>8.1 创建和使用类</h3><h4 id="8-1-1-创建dog类"><a href="#8-1-1-创建dog类" class="headerlink" title="8.1.1 创建dog类"></a>8.1.1 创建dog类</h4><blockquote>
<p>class Dog():<code>1</code></p>
<p>​    “””一次模拟小狗的简单尝试”””<code>2</code></p>
<p>​    def _init_ (self,name,age):<code>3</code></p>
<p>​        “””初始化属性name和age”””</p>
<p>​        self.name = name<code>4</code></p>
<p>​        self.age = age</p>
<p>​    </p>
<p>​    def sit(self):<code>5</code></p>
<p>​        “””模拟小狗被命令时蹲下”””</p>
<p>​        print(self.name.title() + “ is now sitting.”)</p>
<p>​    def roll_over(self)</p>
<p>​        “””模拟小狗被命令时打滚”””</p>
<p>​        print(self.name.title() + “ rolled over!”)</p>
</blockquote>
<ul>
<li><p>在<code>1</code>处，我们定义了一个名为Dog的类。根据约定，在python中，首字母大写的名称指的是类。</p>
</li>
<li><p>在<code>2</code>处，我们编写了一个文档字符串，对这个类的功能作了描述</p>
</li>
<li><p><strong>方法<em>init\</em>()</strong></p>
<ul>
<li><p>类中的函数称为<strong>方法</strong>：你前面学到的有关函数的一切都适用于方法，就目前而言，唯一的重要差别是调用方法的方式。<code>3</code>处的方法<em>init\</em>()是一个特殊的方法，每当你根据Dog类创建新实例时，python都会自动运行它。</p>
<p>在这个方法名称中，开头和末尾各有两个下划线，这是一种约定，旨在避免python<strong>默认方法</strong>与<strong>普通方法</strong>发生名称冲突。</p>
</li>
<li><p>我们将方法<em>init\</em>()定义成了包含三个形参：self、name、和age。在这个方法的定义中，<strong>形参self必不可少</strong>，还必须位于其他形参的前面。因为python调用这个_init_()方法来创建Dog实例时，将自动传入实参self。每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</p>
</li>
<li><p>我们创建Dog实例时，python将调用Dog类的方法_init_()。我们将通过实参向Dog()传递名字和年龄；self会自动传递，因此我们不需要传递它。每当我们根据Dog类穿件实例时，都只需给最后两个形参(name和age)提供值。</p>
</li>
<li><p><code>4</code>处定义的两个变量都有前缀self。以self为前缀的变量都可供类中的所有方法使用。我们还可以通过类的任何实例来访问这些变量。self.name = name获取存储在形参name中的值，并将其存储到变量name中，然后该变量被关联到当前创建的实例。</p>
</li>
<li><p>像这样可通过实例访问的变量称为<strong>属性</strong></p>
</li>
<li><p>Dog类还定义了另外两个方法：sit()和roll_over。由于这些方法不需要额外的信息，例如名字和年龄，因此它们只有一个形参self。</p>
</li>
</ul>
</li>
</ul>
<h4 id="8-1-2-根据类创建实例"><a href="#8-1-2-根据类创建实例" class="headerlink" title="8.1.2 根据类创建实例"></a>8.1.2 根据类创建实例</h4><p>可将类视为有关如何创建实力的说明。Dog类是一系列说明，让python知道如何创建表示特定小狗的实例。</p>
<blockquote>
<p>class Dog():</p>
<p>​    –snip--</p>
<p>my_dog = Dog(‘willie’,6)<code>1</code></p>
<p>print(“My dog’s name is “ + my_ dog.name.title() + “.”)<code>2</code></p>
<p>print(“My dog is “ + str(my_dog.age)+ “years old.”)<code>3</code></p>
</blockquote>
<p>这里使用的是前一个示例中编写的Dog类。在<code>1</code>处，我们让python创建一个名字为’willie’、年龄在6的小狗。方法_Init_()创建一个表示特定小狗的示例，并使用我们提供的值来设置name和age。方法_Init_()并没有显式包含return语句，但python自动返回一个表示这条小狗的实例。我们将这个实例存储在变量my_dog中。在这里，<strong>命名约定很有用</strong>：我们把首字母大写的名称(Dog)指类，而小写的名称(my_dog)指的是根据类创建的实例。</p>
<ol>
<li><p><strong>访问属性</strong></p>
<p>要访问属性，可以用句点表示法。在<code>2</code>处,我们编写了如下代码来访问my_dog的属性name值：</p>
<p>my_dog.name</p>
<p>在Dog中引用这个属性时，使用的时self.name</p>
</li>
<li><p><strong>调用方法</strong></p>
<p>根据Dog类创建实例后，我们就可以使用句点表示法来调用Dog类中定义的任何方法。</p>
<blockquote>
<p>my_dog.sit()</p>
<p>my_dog.roll_over()</p>
</blockquote>
</li>
<li><p>创建多个实例</p>
<blockquote>
<p>my_dog = Dog(‘willie’,6)</p>
<p>your_dog = Dog(‘lucy’,3)</p>
</blockquote>
<p>在这个示例中，我们创建了两条小狗，它们分别名为willie和lucy。每条狗都是一个独立的实例，有自己的一组属性，能够执行相同的操作</p>
</li>
</ol>
<h3 id="8-2-使用类和实例（p142）"><a href="#8-2-使用类和实例（p142）" class="headerlink" title="8.2 使用类和实例（p142）"></a>8.2 使用类和实例（p142）</h3><p>给<strong>属性</strong>指定默认值：</p>
<p>后面加等号数字，没啥说的</p>
<ul>
<li><p>创建一个实例的时候：(例子)</p>
<p>my_new_car = Car(‘audi’,’a4’,’2016’)</p>
<p>使用该实例的方法的语法：</p>
<p>my_new_car.(方法名)</p>
<p>类里的方法形参第一个一定是self,后面才是真正使用的形参(就是c++里的this)</p>
</li>
<li><p>其他和正常函数没什么区别</p>
</li>
</ul>
<h3 id="8-3-继承"><a href="#8-3-继承" class="headerlink" title="8.3 继承"></a>8.3 继承</h3><ul>
<li>编写一个类时，并非总是要从空白开始。如果你要编写的类是另一个类的特殊版本，可使用<strong>继承</strong>。一个类继承另一个类的时候，它将自动获得另一个类的所有属性和方法；原本的类称为父类，而新类是子类。</li>
<li>往后描述太多 代码过多，自己看书 吧 p147</li>
</ul>
<h1 id="终"><a href="#终" class="headerlink" title="终"></a>终</h1>]]></content>
  </entry>
</search>
